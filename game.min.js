const paletteColors=['#FF0000','#00FF00','#0000FF','#FFFF00','#FF00FF','#00FFFF','#FFFFFF','#000000'];
let currentColor=paletteColors[0],
    tool='fill', undoStack=[],redoStack=[],MAX=20,isFilling=false;
const pal=document.getElementById('palette');
paletteColors.forEach(c=>{let b=document.createElement('div');b.className='color-btn';b.style.background=c;b.onclick=()=>currentColor=c;pal.appendChild(b)});
const canvas=document.getElementById('canvas'),ctx=canvas.getContext('2d');
const brush=new Brush(canvas);brush.bindConfig({color:currentColor,size:8,flow:.8,opacity:.8,spacing:.15,roundness:1,angle:0});
document.getElementById('tool').onchange=e=>tool=e.target.value;
['undo','redo','save'].forEach(id=>document.getElementById(id).onclick={undo:undoFn,redo:redoFn,save:download}[id]);
canvas.addEventListener('click',e=>tool==='fill'&&fillAt(e));
canvas.addEventListener('touchstart',e=>{if(tool==='fill'){fillAt(e)}else brushStart(e);e.preventDefault()});
canvas.addEventListener('mousedown',brushStart);
function brushStart(e){if(tool!=='brush')return;brush.change({color:currentColor});brush.bindConfig({color:currentColor});brush.putPoint(getCoords(e).x,getCoords(e).y,1);brush.render();window.addEventListener('mousemove',brushMove);window.addEventListener('mouseup',brushEnd)}
function brushMove(e){const p=getCoords(e);brush.putPoint(p.x,p.y,1);brush.render();}
function brushEnd(){brush.finalizeStroke();window.removeEventListener('mousemove',brushMove);window.removeEventListener('mouseup',brushEnd);saveState(undoStack);redoStack=[]}
function getCoords(e){const r=canvas.getBoundingClientRect(),p=e.touches?e.touches[0]:e;return{x:Math.floor(p.clientX-r.left),y:Math.floor(p.clientY-r.top)}}
function saveState(s){if(s.length>=MAX)s.shift();s.push(canvas.toDataURL())}
function undoFn(){if(!undoStack.length)return;saveState(redoStack);const i=new Image();i.src=undoStack.pop();i.onload=()=>ctx.drawImage(i,0,0);}
function redoFn(){if(!redoStack.length)return;saveState(undoStack);const i=new Image();i.src=redoStack.pop();i.onload=()=>ctx.drawImage(i,0,0);}
function download(){let a=document.createElement('a');a.download='coloring.png';a.href=canvas.toDataURL('image/png');a.click();}
function fillAt(e){if(isFilling)return;const{ x,y}=getCoords(e);saveState(undoStack);redoStack=[];isFilling=true;const imgData=ctx.getImageData(0,0,canvas.width,canvas.height);offscreenFill(imgData,x,y,currentColor,32).then(d=>{ctx.putImageData(d,0,0);isFilling=false;});}
function init(){const img=new Image();img.src='outline.svg';img.onload=()=>{ctx.drawImage(img,0,0,canvas.width,canvas.height);saveState(undoStack);}};
init();
